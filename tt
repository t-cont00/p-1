# Define API credentials and base URL
API_URL="https://server.server.server.com/rest/api/1.0/projects/ABC/repos"
AUTH_TOKEN="nshehehhe"

LIMIT=700
START=0
COUNT=1

# Declare an array for repositories
declare -a REPOS

echo "Fetching all sub-repositories..."

while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL?limit=$LIMIT&start=$START")

    for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
        REPOS+=("$repo_name")
        ((COUNT++))
    done

    is_last_page=$(echo "$response" | grep -o '"isLastPage":true')
    if [ -n "$is_last_page" ]; then break; fi
    START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
done

echo "Total repositories listed: $((COUNT - 1))"

read -p "Enter the number of projects you want to search: " num_projects
PROJECTS=()

for ((i = 1; i <= num_projects; i++)); do
    read -p "Enter project name $i: " project_name
    if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
        PROJECTS+=("$project_name")
    else
        echo "No such project found: $project_name"
    fi
done

if [ ${#PROJECTS[@]} -eq 0 ]; then
    echo "No valid projects to search. Exiting..."
    exit 1
fi

read -p "Enter the pattern to search inside 'k8s/envs/pr' folder: " pattern

function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$file_url")

    if [[ "$file_content" != *"statefulset"* ]]; then return; fi

    declare -a required_pairs_one=(
        "name: API_SERVER"
        "value: \"uc4webprodny.chicago.cme.com\""
        "name: API_CLIENT"
        "value: \"185\""
        "name: UC4_ENV"
        "value: \"NY\""
        "name: APPSERVER1"
        "value: \"ucprap0001j.chicago.cme.com\""
        "name: AGENT_PORT"
        "value: \"2307\""
    )

    declare -a required_pairs_two=(
        "name: API_SERVER"
        "value: \"uc4dr.chicago.cme.com\""
        "name: API_CLIENT"
        "value: \"100\""
        "name: UC4_ENV"
        "value: \"DR\""
        "name: APPSERVER1"
        "value: \"ucdrap0001j.chicago.cme.com\""
        "name: AGENT_PORT"
        "value: \"2305\""
    )

    function check_pair_set {
        local -n pairs=$1
        for pair in "${pairs[@]}"; do
            if ! echo "$file_content" | grep -qE "$pair"; then
                return 1
            fi
        done
        return 0
    }

    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        echo "✔ Content Available: $file_url"
    else
        echo "✖ Content Not Available: $file_url"
    fi
}

function search_in_directory {
    local project_name="$1"
    local base_path="$2"
    local pattern="$3"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then return; fi

    items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))
    found_matching_dir=false

    for item in "${items[@]}"; do
        full_path="$base_path/$item"
        if [[ "$item" == *"statefulset-"*"$pattern"* ]] && [[ "$item" =~ \.ya?ml$ ]]; then
            check_yaml_content "$project_name" "$full_path"
            found_matching_dir=true
        fi

        if [[ ! "$item" =~ \. ]]; then
            search_in_directory "$project_name" "$full_path" "$pattern" &
        fi
    done
    wait

    if [ "$found_matching_dir" = false ]; then
        echo "No directories found matching with input pattern $pattern in project $project_name"
    fi
}

function search_pr_folders {
    local project_name="$1"
    local pattern="$2"
    local base_path="k8s/envs/pr"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        echo "Base path does not exist: $base_path"
        return
    fi

    folders=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))
    found=false

    for folder in "${folders[@]}"; do
        folder_path="$base_path/$folder"
        search_in_directory "$project_name" "$folder_path" "$pattern" &
        found=true
    done
    wait

    if [ "$found" = false ]; then
        echo "No directories found matching with input pattern $pattern in project $project_name"
    fi
}

for project_name in "${PROJECTS[@]}"; do
    search_pr_folders "$project_name" "$pattern"
done
