#!/bin/bash

API_URL="https://server.server.server.com/rest/api/1.0/projects/ABC/repos"
AUTH_TOKEN="nshehehhe"

# Function to recursively list all folders under "project-name/browse/"
function list_all_folders {
    local project_name="$1"
    local base_path="$2"

    # Fetch folder & file list
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        return
    fi

    # Extract directory names
    folders=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for folder in "${folders[@]}"; do
        full_path="$base_path/$folder"
        echo "üìÇ Found folder: $full_path"

        # Recursively search inside subfolders
        list_all_folders "$project_name" "$full_path" &
    done

    wait
}

# Function to fetch project names from projects.txt and list all folders
function process_projects {
    while IFS= read -r project_name; do
        echo "üîç Searching in project: $project_name"
        list_all_folders "$project_name" "$project_name/browse"
    done < projects.txt
}

echo "üöÄ Starting scan..."
process_projects
echo "‚úÖ Scan complete!"


"'*;*;
#!/bin/bash

API_URL="https://server.server.server.com/rest/api/1.0/projects/ABC/repos"
AUTH_TOKEN="nshehehhe"
LIMIT=700
START=0
COUNT=1

# Function to check if a YAML file contains the required condition
function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                          -H "Content-Type: application/json" \
                          "$file_url")

    # Define required search condition (Modify as needed)
    SEARCH_PATTERN="nodeaffinity:.*RequiredDuringSchedule"

    if [[ "$file_content" =~ $SEARCH_PATTERN ]]; then
        echo "‚úÖ Match found in: $file_url"
    fi
}

# Function to recursively scan directories and check YAML files
function search_in_directory {
    local project_name="$1"
    local base_path="$2"

    # Fetch folder & file list **only once** to reduce API calls
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                      -H "Content-Type: application/json" \
                      "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        return
    fi

    # Extract directory and file names
    items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for item in "${items[@]}"; do
        full_path="$base_path/$item"

        # If it's a YAML file, check for required condition
        if [[ "$item" =~ \.ya?ml$ ]]; then
            check_yaml_content "$project_name" "$full_path"
        fi

        # If it's a directory, recursively search inside it
        if [[ ! "$item" =~ \. ]]; then
            search_in_directory "$project_name" "$full_path" &
        fi
    done

    wait
}

# Function to fetch project names from projects.txt and scan all folders
function process_projects {
    while IFS= read -r project_name; do
        echo "üîç Scanning project: $project_name"
        search_in_directory "$project_name" "$project_name/browse"
    done < projects.txt
}

echo "üöÄ Starting scan..."
process_projects
echo "‚úÖ Scan completed!"
