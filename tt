#!/bin/bash

# API Configuration
API_URL="https://server.server.server.com/rest/api/1.0/projects/ABC/repos"
AUTH_TOKEN="nshehehhe"

LIMIT=700
START=0

# Declare an array for repositories
declare -a REPOS

# Fetch all repositories
function fetch_repositories() {
    echo "Fetching all repositories..."
    while true; do
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "Content-Type: application/json" \
            "$API_URL?limit=$LIMIT&start=$START")

        # Extract repository names
        for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
            REPOS+=("$repo_name")
        done

        # Check if it's the last page
        is_last_page=$(echo "$response" | grep -o '"isLastPage":true')
        if [ -n "$is_last_page" ]; then
            break
        fi

        # Get next start index
        START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
    done
    echo "Total repositories listed: ${#REPOS[@]}"
}

# Function to check YAML content
function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Define two sets of required pairs
    declare -a required_pairs_one=(
        "name: API_SERVER value: uc4webprodny.chicago.cme.com"
        "name: API_CLIENT value: 185"
        "name: UC4_ENV value: NY"
        "name: APPSERVER1 value: ucprap0001j.chicago.cme.com"
        "name: AGENT_PORT value: 2307"
    )

    declare -a required_pairs_two=(
        "name: API_SERVER value: uc4dr.chicago.cme.com"
        "name: API_CLIENT value: 100"
        "name: UC4_ENV value: DR"
        "name: APPSERVER1 value: ucdrap0001j.chicago.cme.com"
        "name: APPSERVER2 value: ucdrap0002j.chicago.cme.com"
        "name: APPSERVER3 value: ucdrap0003j.chicago.cme.com"
        "name: AGENT_PORT value: 2305"
    )

    # Function to check if all pairs in a set exist in the file
    function check_pair_set {
        local -n pairs=$1  # Use nameref for array
        for pair in "${pairs[@]}"; do
            if [[ "$file_content" != *"$pair"* ]]; then
                return 1  # Set is not fully present
            fi
        done
        return 0  # Set is fully present
    }

    # Check if either set is fully present
    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        echo "✔ Content Available: $file_url"
    else
        echo "✖ Content Not Available: $file_url"
    fi
}

# Function to search for directories and YAML files
function search_in_directory {
    local project_name="$1"
    local base_path="$2"
    local pattern="$3"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        return
    fi

    # Extract directory and file names
    items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for item in "${items[@]}"; do
        full_path="$base_path/$item"

        # Check if the item is a YAML file and matches the pattern
        if [[ "$item" == *"$pattern"* ]] && [[ "$item" =~ \.ya?ml$ ]]; then
            check_yaml_content "$project_name" "$full_path"
        fi

        # If it's a directory, recursively search inside it
        if [[ ! "$item" =~ \. ]]; then
            search_in_directory "$project_name" "$full_path" "$pattern" &
        fi
    done

    wait  # Wait for all background processes
}

# Function to search in project folders
function search_pr_folders {
    local project_name="$1"
    local pattern="$2"
    local base_path="k8s/envs/pr"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        echo "⚠ Base path does not exist: $base_path in project $project_name"
        return
    fi

    # Extract all first-level folders
    folders=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    if [[ ${#folders[@]} -eq 0 ]]; then
        echo "❌ No directories found matching with input pattern '$pattern' in project $project_name"
        return
    fi

    for folder in "${folders[@]}"; do
        folder_path="$base_path/$folder"
        search_in_directory "$project_name" "$folder_path" "$pattern" &
    done

    wait  # Wait for all parallel jobs
}

# Main Execution
fetch_repositories

# Ask user for the number of projects to search
read -p "Enter the number of projects you want to search: " num_projects
PROJECTS=()

for ((i = 1; i <= num_projects; i++)); do
    read -p "Enter project name $i: " project_name
    if [[ " ${REPOS[*]} " =~ " $project_name " ]]; then
        PROJECTS+=("$project_name")
    else
        echo "❌ No such project found: $project_name"
    fi
done

# If no valid projects found, exit
if [ ${#PROJECTS[@]} -eq 0 ]; then
    echo "❌ No valid projects to search. Exiting..."
    exit 1
fi

# Ask user for the pattern to search
read -p "Enter the pattern to search inside 'k8s/envs/pr' folder: " pattern

# Search for the pattern in each valid project
for project_name in "${PROJECTS[@]}"; do
    search_pr_folders "$project_name" "$pattern"
done

;;;;;;;
#!/bin/bash

# API Configuration
API_URL="https://server.server.server.com/rest/api/1.0/projects"
AUTH_TOKEN="your_auth_token"

# Fetch all repositories
function fetch_repositories() {
    echo "Fetching all repositories..."
    local response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" -H "Content-Type: application/json" "$API_URL")
    echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'
}

# Validate projects from projects.txt
function validate_projects() {
    local fetched_repos=($(fetch_repositories))
    local valid_projects=()
    
    while IFS= read -r project; do
        if [[ " ${fetched_repos[*]} " =~ " $project " ]]; then
            valid_projects+=("$project")
        else
            echo "Cannot find project: $project"
        fi
    done < projects.txt

    echo "${valid_projects[@]}"
}

# Search for directories matching the input pattern
function search_directories() {
    local project="$1"
    local pattern="$2"
    
    local response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" -H "Content-Type: application/json" "$API_URL/$project/browse")
    local matching_dirs=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/' | grep "$pattern"))

    if [[ ${#matching_dirs[@]} -eq 0 ]]; then
        echo "No directories found matching with input pattern $pattern in project $project"
    else
        for dir in "${matching_dirs[@]}"; do
            search_yaml_files "$project" "$dir" "$pattern"
        done
    fi
}

# Search for statefulset YAML files and validate content
function search_yaml_files() {
    local project="$1"
    local directory="$2"
    local pattern="$3"

    local yaml_file="statefulset-$pattern.yaml"
    local response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" -H "Content-Type: application/json" "$API_URL/$project/browse/$directory")
    local yaml_match=$(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/' | grep "$yaml_file")

    if [[ -z "$yaml_match" ]]; then
        echo "No statefulset YAML file found in $directory of project $project"
        return
    fi

    check_yaml_content "$project" "$directory/$yaml_file"
}

# Validate YAML content for required key-value pairs
function check_yaml_content() {
    local project="$1"
    local file_path="$2"
    local file_url="$API_URL/$project/browse/$file_path"

    local file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" -H "Content-Type: application/json" "$file_url")

    declare -A required_pairs=(
        ["name: API_SERVER"]="value: uc4webprodny.chicago.cme.com"
        ["name: API_CLIENT"]="value: 185"
        ["name: UC4_ENV"]="value: NY"
        ["name: AGENT_PORT"]="value: 2307"
    )

    local all_present=true
    for key in "${!required_pairs[@]}"; do
        if [[ "$file_content" != *"$key"* ]] || [[ "$file_content" != *"${required_pairs[$key]}"* ]]; then
            all_present=false
            break
        fi
    done

    if $all_present; then
        echo "Valid YAML found: $file_url"
    else
        echo "Required pairs missing in: $file_url"
    fi
}

# Main Execution
projects=($(validate_projects))
read -p "Enter the input pattern to search: " pattern

for project in "${projects[@]}"; do
    search_directories "$project" "$pattern" &
done

wait
echo "Scan completed."


**********

#!/bin/bash

API_URL="https://server.server.server.com/rest/api/1.0/projects/ABC/repos"
AUTH_TOKEN="nshehehhe"
LIMIT=700
START=0
COUNT=1

declare -a REPOS

function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                         -H "Content-Type: application/json" \
                         "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Define two sets of required pairs
    declare -a required_pairs_one=(
        "name: API_SERVER value: \"uc4webprodny.chicago.cme.com\""
        "name: API_CLIENT value: \"185\""
        "name: UC4_ENV value: \"NY\""
        "name: APPSERVER1 value: \"ucprap0001j.chicago.cme.com\""
        "name: AGENT_PORT value: \"2307\""
    )

    declare -a required_pairs_two=(
        "name: API_SERVER value: \"uc4dr.chicago.cme.com\""
        "name: API_CLIENT value: \"100\""
        "name: UC4_ENV value: \"DR\""
        "name: APPSERVER1 value: \"ucdrap0001j.chicago.cme.com\""
        "name: APPSERVER2 value: \"ucdrap0002j.chicago.cme.com\""
        "name: APPSERVER3 value: \"ucdrap0003j.chicago.cme.com\""
        "name: AGENT_PORT value: \"2305\""
    )

    # Function to check if all pairs in a set exist in the file
    function check_pair_set {
        local -n pairs=$1 # Use nameref for array
        for pair in "${pairs[@]}"; do
            if [[ "$file_content" != *"$pair"* ]]; then
                return 1 # Set is not fully present
            fi
        done
        return 0 # Set is fully present
    }

    # Check if either set is fully present
    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        echo "✔ Content Available: $file_url"
    else
        echo "✖ Content Not Available: $file_url"
    fi

    found_files=true  # Mark that at least one matching file was found
}

function search_in_directory {
    local project_name="$1"
    local base_path="$2"
    local pattern="$3"

    echo "🔍 Searching under: $API_URL/$project_name/browse/$base_path"

    # Fetch folder & file list
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                     -H "Content-Type: application/json" \
                     "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        echo "Skipping: $base_path (not found)"
        return
    fi

    # Extract directory and file names
    items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for item in "${items[@]}"; do
        full_path="$base_path/$item"

        # Check if the item is a YAML file and matches the pattern
        if [[ "$item" == *"$pattern"* ]] && [[ "$item" =~ \.ya?ml$ ]]; then
            check_yaml_content "$project_name" "$full_path"
        fi

        # If it's a directory, recursively search inside it
        if [[ ! "$item" =~ \. ]]; then
            search_in_directory "$project_name" "$full_path" "$pattern" &
        fi
    done

    # Wait for all background jobs before returning
    wait
}

function search_pr_folders {
    local project_name="$1"
    local pattern="$2"
    local base_path="k8s/envs/pr"

    found_files=false  # Reset found_files flag for the project

    echo "Fetching data from: $API_URL/$project_name/browse/$base_path"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                     -H "Content-Type: application/json" \
                     "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        echo "Base path does not exist: $base_path"
        return
    fi

    # Extract all first-level folders
    folders=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for folder in "${folders[@]}"; do
        folder_path="$base_path/$folder"
        echo "🔍 Exploring: $folder_path"

        # Recursively search in parallel for each folder
        search_in_directory "$project_name" "$folder_path" "$pattern" &
    done

    # Wait for all parallel jobs
    wait

    # If no files were found, print a message
    if ! $found_files; then
        echo "⚠ No matching YAML files found in project: $project_name"
    fi
}

echo "Fetching all sub-repositories..."

START=0
LIMIT=700 # Adjust as needed
REPOS=()
COUNT=1

while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
                     -H "Content-Type: application/json" \
                     "$API_URL?limit=$LIMIT&start=$START")

    # Extract repository names
    for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
        REPOS+=("$repo_name")
        ((COUNT++))
    done

    # Check if it's the last page
    is_last_page=$(echo "$response" | grep -o '"isLastPage":true')

    if [ -n "$is_last_page" ]; then
        break
    fi

    # Get next start index
    START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
done

echo "Total repositories listed: $((COUNT - 1))"

# Ask user for the number of projects to search
read -p "Enter the number of projects you want to search: " num_projects

PROJECTS=()

for ((i = 1; i <= num_projects; i++)); do
    read -p "Enter project name $i: " project_name
    if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
        PROJECTS+=("$project_name")
    else
        echo "❌ No such project found: $project_name"
    fi
done

# If no valid projects found, exit
if [ ${#PROJECTS[@]} -eq 0 ]; then
    echo "❌ No valid projects to search. Exiting..."
    exit 1
fi

# Ask user for the pattern to search
read -p "Enter the pattern to search inside 'k8s/envs/pr' folder: " pattern

# Search for the pattern in each valid project
for project_name in "${PROJECTS[@]}"; do
    echo "🔍 Searching in project: $project_name"
    search_pr_folders "$project_name" "$pattern"
done
""""""""
# Define API credentials and base URL
API_URL="https://server.server.server.com/rest/api/1.0/projects/ABC/repos"
AUTH_TOKEN="nshehehhe"

LIMIT=700
START=0
COUNT=1

# Declare an array for repositories
declare -a REPOS

function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$file_url")

    # Check if file contains 'statefulset' in a case-insensitive manner
    if ! echo "$file_content" | grep -qi "statefulset"; then
        return
    fi

    # Define two sets of required pairs
    declare -A required_pairs_one=(
        ["API_SERVER"]="uc4webprodny.chicago.cme.com"
        ["API_CLIENT"]="185"
        ["UC4_ENV"]="NY"
        ["APPSERVER1"]="ucprap0001j.chicago.cme.com"
        ["AGENT_PORT"]="2307"
    )

    declare -A required_pairs_two=(
        ["API_SERVER"]="uc4dr.chicago.cme.com"
        ["API_CLIENT"]="100"
        ["UC4_ENV"]="DR"
        ["APPSERVER1"]="ucdrap0001j.chicago.cme.com"
        ["APPSERVER2"]="ucdrap0002j.chicago.cme.com"
        ["APPSERVER3"]="ucdrap0003j.chicago.cme.com"
        ["AGENT_PORT"]="2305"
    )

    # Function to check if all pairs in a set exist in the YAML content
    function check_pair_set {
        local -n pairs=$1
        for key in "${!pairs[@]}"; do
            if ! echo "$file_content" | grep -q "\"$key\":\s*\"${pairs[$key]}\""; then
                return 1  # Pair is missing
            fi
        done
        return 0  # All pairs found
    }

    # Check if either set is fully present
    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        echo "Content Available: $file_url"
    else
        echo "X Content Not Available: $file_url"
    fi
}

function search_in_directory {
    local project_name="$1"
    local base_path="$2"
    local pattern="$3"
    local found_directory=false

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        return
    fi

    # Extract directories that contain the input pattern
    items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))
    
    for item in "${items[@]}"; do
        if [[ "$item" == *"$pattern"* ]]; then
            found_directory=true
            full_path="$base_path/$item"

            # Look for the specific YAML file format "statefulset-{anything}-{pattern}.yml"
            yaml_files=($(echo "$response" | grep -o '"name":"statefulset-[^"]*'" | sed -E 's/"name":"([^"]+)"/\1/'))

            for yaml_file in "${yaml_files[@]}"; do
                if [[ "$yaml_file" == "statefulset-"*"$pattern"*".yml" ]]; then
                    check_yaml_content "$project_name" "$full_path/$yaml_file"
                fi
            done
        fi
    done

    # If no matching directories were found, print the message
    if [ "$found_directory" = false ]; then
        echo "No directories found matching with input pattern $pattern in project $project_name"
    fi
}

function search_pr_folders {
    local project_name="$1"
    local pattern="$2"
    local base_path="k8s/envs/pr"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        echo "Base path does not exist: $base_path in project $project_name"
        return
    fi

    # Extract all first-level folders
    folders=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for folder in "${folders[@]}"; do
        folder_path="$base_path/$folder"
        search_in_directory "$project_name" "$folder_path" "$pattern" &
    done

    wait
}

echo "Fetching all sub-repositories..."
START=0
LIMIT=700
REPOS=()
COUNT=1

while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL?limit=$LIMIT&start=$START")

    for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
        REPOS+=("$repo_name")
        ((COUNT++))
    done

    is_last_page=$(echo "$response" | grep -o '"isLastPage":true')

    if [ -n "$is_last_page" ]; then
        break
    fi

    START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
done

echo "Total repositories listed: $((COUNT - 1))"

read -p "Enter the number of projects you want to search: " num_projects
PROJECTS=()

for ((i = 1; i <= num_projects; i++)); do
    read -p "Enter project name $i: " project_name
    if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
        PROJECTS+=("$project_name")
    else
        echo "X No such project found: $project_name"
    fi
done

if [ ${#PROJECTS[@]} -eq 0 ]; then
    echo "X No valid projects to search. Exiting..."
    exit 1
fi

read -p "Enter the pattern to search inside 'k8s/envs/pr' folder: " pattern

for project_name in "${PROJECTS[@]}"; do
    search_pr_folders "$project_name" "$pattern"
done




****
# Define API credentials and base URL
API_URL="https://server.server.server.com/rest/api/1.0/projects/ABC/repos"
AUTH_TOKEN="nshehehhe"

LIMIT=700
START=0
COUNT=1

# Declare an array for repositories
declare -a REPOS

echo "Fetching all sub-repositories..."

while true; do
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL?limit=$LIMIT&start=$START")

    for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
        REPOS+=("$repo_name")
        ((COUNT++))
    done

    is_last_page=$(echo "$response" | grep -o '"isLastPage":true')
    if [ -n "$is_last_page" ]; then break; fi
    START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
done

echo "Total repositories listed: $((COUNT - 1))"

read -p "Enter the number of projects you want to search: " num_projects
PROJECTS=()

for ((i = 1; i <= num_projects; i++)); do
    read -p "Enter project name $i: " project_name
    if [[ " ${REPOS[@]} " =~ " $project_name " ]]; then
        PROJECTS+=("$project_name")
    else
        echo "No such project found: $project_name"
    fi
done

if [ ${#PROJECTS[@]} -eq 0 ]; then
    echo "No valid projects to search. Exiting..."
    exit 1
fi

read -p "Enter the pattern to search inside 'k8s/envs/pr' folder: " pattern

function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$file_url")

    if [[ "$file_content" != *"statefulset"* ]]; then return; fi

    declare -a required_pairs_one=(
        "name: API_SERVER"
        "value: \"uc4webprodny.chicago.cme.com\""
        "name: API_CLIENT"
        "value: \"185\""
        "name: UC4_ENV"
        "value: \"NY\""
        "name: APPSERVER1"
        "value: \"ucprap0001j.chicago.cme.com\""
        "name: AGENT_PORT"
        "value: \"2307\""
    )

    declare -a required_pairs_two=(
        "name: API_SERVER"
        "value: \"uc4dr.chicago.cme.com\""
        "name: API_CLIENT"
        "value: \"100\""
        "name: UC4_ENV"
        "value: \"DR\""
        "name: APPSERVER1"
        "value: \"ucdrap0001j.chicago.cme.com\""
        "name: AGENT_PORT"
        "value: \"2305\""
    )

    function check_pair_set {
        local -n pairs=$1
        for pair in "${pairs[@]}"; do
            if ! echo "$file_content" | grep -qE "$pair"; then
                return 1
            fi
        done
        return 0
    }

    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        echo "✔ Content Available: $file_url"
    else
        echo "✖ Content Not Available: $file_url"
    fi
}

function search_in_directory {
    local project_name="$1"
    local base_path="$2"
    local pattern="$3"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then return; fi

    items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))
    found_matching_dir=false

    for item in "${items[@]}"; do
        full_path="$base_path/$item"
        if [[ "$item" == *"statefulset-"*"$pattern"* ]] && [[ "$item" =~ \.ya?ml$ ]]; then
            check_yaml_content "$project_name" "$full_path"
            found_matching_dir=true
        fi

        if [[ ! "$item" =~ \. ]]; then
            search_in_directory "$project_name" "$full_path" "$pattern" &
        fi
    done
    wait

    if [ "$found_matching_dir" = false ]; then
        echo "No directories found matching with input pattern $pattern in project $project_name"
    fi
}

function search_pr_folders {
    local project_name="$1"
    local pattern="$2"
    local base_path="k8s/envs/pr"

    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        echo "Base path does not exist: $base_path"
        return
    fi

    folders=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))
    found=false

    for folder in "${folders[@]}"; do
        folder_path="$base_path/$folder"
        search_in_directory "$project_name" "$folder_path" "$pattern" &
        found=true
    done
    wait

    if [ "$found" = false ]; then
        echo "No directories found matching with input pattern $pattern in project $project_name"
    fi
}

for project_name in "${PROJECTS[@]}"; do
    search_pr_folders "$project_name" "$pattern"
done
