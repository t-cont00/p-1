# Function to check required conditions in a YAML file
function check_yaml_conditions {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/raw/$file_path?at=refs%2Fheads%2Fmain"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    # First, check if nodeAffinity exists
    if [[ "$file_content" == *"nodeAffinity"* ]]; then
        # If nodeAffinity exists, check for specific scheduling conditions
        if [[ "$file_content" == *"requiredDuringSchedulingIgnoredDuringExecution"* ]] || \
           [[ "$file_content" == *"preferredDuringSchedulingIgnoredDuringExecution"* ]]; then
            echo "$project_name,$file_url" >> conditions.csv
            return 0
        fi
    fi

    return 1
}


":!"!";";
# Function to check required conditions in a YAML file using regex
function check_yaml_conditions {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/raw/$file_path?at=refs%2Fheads%2Fmain"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    # Check if file contains the required condition using regex
    if echo "$file_content" | grep -Eq "nodeAffinity:.*(Requiredduringscheduling|Ignoredduringexecution)"; then
        echo "$project_name,$file_url" >> conditions.csv
        return 0
    fi

    return 1
}


"':;!
# Function to check YAML conditions in nested format
function check_yaml_conditions {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/raw/$file_path?at=refs%2Fheads%2Fmain"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    # Convert content into an array of lines
    IFS=$'\n' read -d '' -r -a lines <<< "$file_content"

    # Iterate through lines to detect the nested pattern
    for ((i = 0; i < ${#lines[@]} - 2; i++)); do
        line1=$(echo "${lines[$i]}" | tr -d '[:space:]')      # Remove whitespace
        line2=$(echo "${lines[$i + 1]}" | tr -d '[:space:]')
        line3=$(echo "${lines[$i + 2]}" | tr -d '[:space:]')

        # Check for nested YAML pattern
        if [[ "$line1" == "affinity:" && "$line2" == "nodeAffinity:" && "$line3" == "requiredDuringSchedulingIgnoredDuringExecution:" ]]; then
            echo "$project_name,$file_url" >> conditions.csv
            return 0
        fi
    done

    return 1
}

"':!

function check_yaml_conditions {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/raw/$file_path?at=refs%2Fheads%2Fmain"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    # Convert content into an array of lines
    IFS=$'\n' read -d '' -r -a lines <<< "$file_content"

    # Iterate through lines to detect the pattern
    for ((i = 0; i < ${#lines[@]} - 1; i++)); do
        if [[ "${lines[$i]}" =~ nodeAffinity: ]]; then
            next_line=$(echo "${lines[$i + 1]}" | tr -d '[:space:]')  # Remove spaces

            # Check for the required conditions in the next line
            if [[ "$next_line" == "RequiredduringschedulingIgnoredDuringExecution" ]] || \
               [[ "$next_line" == "PreferredDuringSchedulingIgnoredDuringExecution" ]]; then
                echo "$project_name,$file_url" >> conditions.csv
                return 0
            fi
        fi
    done

    return 1
}


"';!!';
#!/bin/bash

# Define API credentials and base URL
API_URL="https://server.server.abc.com/rest/api/1.0/projects/CND/repos"
AUTH_TOKEN="{Auth token}"
LIMIT=700
CSV_FILE="results.csv"

# Initialize CSV file with a header
echo "Project Name,File Path" > "$CSV_FILE"

# Declare an array for repositories
declare -a REPOS

# Function to check required conditions in a YAML file
function check_yaml_conditions {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    # Check if file contains either required condition
    if [[ "$file_content" == *"Requiredduringscheduling"* ]] || [[ "$file_content" == *"Ignoredduringexecution"* ]]; then
        echo "Condition available in: $file_url"
        echo "$project_name,$file_url" >> "$CSV_FILE"
        return 0
    fi

    return 1
}

# Recursive function to scan .yaml files under k8s/envs/pr
function search_yaml_files {
    local project_name="$1"
    local base_path="$2"
    local found_condition=1  # Assume no conditions are found initially

    # Fetch folder & file list
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"*"not found"* ]]; then
        echo "No such folder available in $project_name"
        return
    fi

    # Extract directory and file names
    items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    if [[ ${#items[@]} -eq 0 ]]; then
        echo "No files found in $project_name"
        return
    fi

    for item in "${items[@]}"; do
        full_path="$base_path/$item"

        # If it's a YAML file, check for conditions
        if [[ "$item" =~ \.ya?ml$ ]]; then
            if check_yaml_conditions "$project_name" "$full_path"; then
                found_condition=0
            fi
        fi

        # If it's a directory, recursively search inside it
        if [[ ! "$item" =~ \. ]]; then
            search_yaml_files "$project_name" "$full_path" &
        fi
    done

    wait

    # If no conditions were found, print the message
    if [[ $found_condition -eq 1 ]]; then
        echo "No such conditions available in $project_name"
    fi
}

# Fetch only valid repositories (exclude common system names)
function fetch_repositories {
    START=0
    while true; do
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "Content-Type: application/json" "$API_URL?limit=$LIMIT&start=$START")

        # Extract repository names, but filter out unwanted names
        for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
            if [[ "$repo_name" != "ssh" && "$repo_name" != "http" && "$repo_name" != "cloud_native_deploy" ]]; then
                REPOS+=("$repo_name")
            fi
        done

        # Check if it's the last page
        is_last_page=$(echo "$response" | grep -o '"isLastPage":true')
        if [ -n "$is_last_page" ]; then
            break
        fi

        # Get next start index
        START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
    done
}

# Main execution
fetch_repositories

for project_name in "${REPOS[@]}"; do
    echo "Searching in project: $project_name"
    search_yaml_files "$project_name" "k8s/envs/pr"
done

echo "Scan complete. Results saved in $CSV_FILE."

^°€=¥^¥=¥
#!/bin/bash

# Define API credentials and base URL
API_URL="https://server.server.abc.com/rest/api/1.0/projects/CND/repos"
AUTH_TOKEN="{Auth token}"
LIMIT=700

# Declare an array for repositories
declare -a REPOS

# Function to check required conditions in a YAML file
function check_yaml_conditions {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    # Check if file contains either required condition
    if [[ "$file_content" == *"Requiredduringscheduling"* ]] || [[ "$file_content" == *"Ignoredduringexecution"* ]]; then
        echo "Condition available in: $file_url"
        return 0
    fi

    return 1
}

# Recursive function to scan .yaml files under k8s/envs/pr
function search_yaml_files {
    local project_name="$1"
    local base_path="$2"
    local found_condition=1  # Assume no conditions are found initially

    # Fetch folder & file list
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"*"not found"* ]]; then
        echo "No such folder available in $project_name"
        return
    fi

    # Extract directory and file names
    items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    if [[ ${#items[@]} -eq 0 ]]; then
        echo "No files found in $project_name"
        return
    fi

    for item in "${items[@]}"; do
        full_path="$base_path/$item"

        # If it's a YAML file, check for conditions
        if [[ "$item" =~ \.ya?ml$ ]]; then
            if check_yaml_conditions "$project_name" "$full_path"; then
                found_condition=0
            fi
        fi

        # If it's a directory, recursively search inside it
        if [[ ! "$item" =~ \. ]]; then
            search_yaml_files "$project_name" "$full_path" &
        fi
    done

    wait

    # If no conditions were found, print the message
    if [[ $found_condition -eq 1 ]]; then
        echo "No such conditions available in $project_name"
    fi
}

# Fetch only valid repositories (exclude common system names)
function fetch_repositories {
    START=0
    while true; do
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "Content-Type: application/json" "$API_URL?limit=$LIMIT&start=$START")

        # Extract repository names, but filter out unwanted names
        for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
            if [[ "$repo_name" != "ssh" && "$repo_name" != "http" && "$repo_name" != "cloud_native_deploy" ]]; then
                REPOS+=("$repo_name")
            fi
        done

        # Check if it's the last page
        is_last_page=$(echo "$response" | grep -o '"isLastPage":true')
        if [ -n "$is_last_page" ]; then
            break
        fi

        # Get next start index
        START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
    done
}

# Main execution
fetch_repositories

for project_name in "${REPOS[@]}"; do
    echo "Searching in project: $project_name"
    search_yaml_files "$project_name" "k8s/envs/pr"
done

echo "Scan complete"



*':!!":
#!/bin/bash

# Define API credentials and base URL
API_URL="https://server.server.abc.com/rest/api/1.0/projects/CND/repos"
AUTH_TOKEN="{Auth token}"
LIMIT=700

# Declare an array for repositories
declare -a REPOS

# Function to check required conditions in a YAML file
function check_yaml_conditions {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    # Check if file contains either required condition
    if [[ "$file_content" == *"Requiredduringscheduling"* ]] || [[ "$file_content" == *"Ignoredduringexecution"* ]]; then
        echo "Condition available in: $file_url"
    fi
}

# Recursive function to scan .yaml files under k8s/envs/pr
function search_yaml_files {
    local project_name="$1"
    local base_path="$2"

    # Fetch folder & file list
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$API_URL/$project_name/browse/$base_path")

    if [[ "$response" == *"errors"* ]]; then
        return
    fi

    # Extract directory and file names
    items=($(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'))

    for item in "${items[@]}"; do
        full_path="$base_path/$item"

        # If it's a YAML file, check for conditions
        if [[ "$item" =~ \.ya?ml$ ]]; then
            check_yaml_conditions "$project_name" "$full_path"
        fi

        # If it's a directory, recursively search inside it
        if [[ ! "$item" =~ \. ]]; then
            search_yaml_files "$project_name" "$full_path" &
        fi
    done

    wait
}

# Fetch all repositories
function fetch_repositories {
    START=0
    while true; do
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "Content-Type: application/json" "$API_URL?limit=$LIMIT&start=$START")

        # Extract repository names
        for repo_name in $(echo "$response" | grep -o '"name":"[^"]*"' | sed -E 's/"name":"([^"]+)"/\1/'); do
            REPOS+=("$repo_name")
        done

        # Check if it's the last page
        is_last_page=$(echo "$response" | grep -o '"isLastPage":true')
        if [ -n "$is_last_page" ]; then
            break
        fi

        # Get next start index
        START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
    done
}

# Main execution
fetch_repositories

for project_name in "${REPOS[@]}"; do
    echo "Searching in project: $project_name"
    search_yaml_files "$project_name" "k8s/envs/pr"
done

echo "Scan complete"
