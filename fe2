const LogViewer = ({ logData, darkMode }) => {
  const [expandedLogs, setExpandedLogs] = useState({});

  const toggleExpand = (index) => {
    setExpandedLogs(prev => ({
      ...prev,
      [index]: !prev[index]
    }));
  };

  // Function to parse the log string into structured data
  const parseLog = (logString) => {
    try {
      // Extract timestamp and severity
      const timestampMatch = logString.match(/^(\d{2}:\d{2}:\d{2}\+\d{2}:\d{2})/);
      const severityMatch = logString.match(/Severity: (\w+)/);
      
      // Extract JSON part (this is a simplified approach)
      const jsonStart = logString.indexOf('{');
      const jsonEnd = logString.lastIndexOf('}') + 1;
      const jsonString = logString.slice(jsonStart, jsonEnd);
      const jsonData = JSON.parse(jsonString.replace(/'/g, '"').replace(/True/g, 'true').replace(/False/g, 'false'));

      return {
        timestamp: timestampMatch ? timestampMatch[1] : 'Unknown',
        severity: severityMatch ? severityMatch[1] : 'UNKNOWN',
        ...jsonData
      };
    } catch (e) {
      console.error('Error parsing log:', e);
      return {
        timestamp: 'Error',
        severity: 'ERROR',
        message: 'Failed to parse log',
        raw: logString
      };
    }
  };

  // Handle case where logData might be a string or array
  const logs = Array.isArray(logData) ? logData : [logData];
  const parsedLogs = logs.map(log => typeof log === 'string' ? parseLog(log) : log);

  return (
    <div style={{
      width: '100%',
      maxWidth: '100%',
      overflowX: 'auto'
    }}>
      {parsedLogs.map((log, index) => (
        <div key={index} style={{
          marginBottom: '10px',
          border: `1px solid ${darkMode ? '#4a5568' : '#e2e8f0'}`,
          borderRadius: '8px',
          overflow: 'hidden'
        }}>
          <div style={{
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            padding: '10px 15px',
            backgroundColor: darkMode ? '#2d3748' : '#f7fafc',
            cursor: 'pointer'
          }} onClick={() => toggleExpand(index)}>
            <div style={{ display: 'flex', gap: '15px', alignItems: 'center' }}>
              <span style={{
                padding: '3px 8px',
                borderRadius: '4px',
                backgroundColor: getSeverityColor(log.severity, darkMode),
                color: 'white',
                fontSize: '12px',
                fontWeight: 'bold'
              }}>
                {log.severity}
              </span>
              <span style={{ color: darkMode ? '#cbd5e0' : '#4a5568' }}>
                {log.timestamp}
              </span>
              <span style={{ 
                fontWeight: '500',
                color: darkMode ? 'white' : '#2d3748'
              }}>
                {log.message || log.reason || 'No message'}
              </span>
            </div>
            <button style={{
              background: 'none',
              border: 'none',
              color: darkMode ? '#cbd5e0' : '#4a5568',
              cursor: 'pointer',
              transform: expandedLogs[index] ? 'rotate(90deg)' : 'rotate(0)',
              transition: 'transform 0.2s ease'
            }}>
              âž”
            </button>
          </div>
          
          {expandedLogs[index] && (
            <div style={{
              padding: '15px',
              backgroundColor: darkMode ? '#1a202c' : '#edf2f7',
              borderTop: `1px solid ${darkMode ? '#4a5568' : '#e2e8f0'}`,
              fontSize: '13px'
            }}>
              <pre style={{
                margin: 0,
                whiteSpace: 'pre-wrap',
                wordWrap: 'break-word',
                color: darkMode ? '#cbd5e0' : '#4a5568',
                fontFamily: 'monospace'
              }}>
                {JSON.stringify(log, null, 2)}
              </pre>
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

// Helper function to get color based on severity
const getSeverityColor = (severity, darkMode) => {
  const severityMap = {
    ERROR: '#e53e3e',
    WARN: '#dd6b20',
    WARNING: '#dd6b20',
    INFO: '#3182ce',
    DEBUG: '#805ad5',
    TRACE: '#718096',
    UNKNOWN: darkMode ? '#4a5568' : '#a0aec0'
  };
  return severityMap[severity.toUpperCase()] || severityMap.UNKNOWN;
};

// Updated MessageBubble component to handle log data
const MessageBubble = ({ message, darkMode }) => {
  const isJsonLog = typeof message.text === 'object' || 
                  (typeof message.text === 'string' && 
                   (message.text.includes('Severity:') || 
                    message.text.includes('{') || 
                    message.text.includes('}')));

  const renderMarkdown = (text) => {
    if (isJsonLog) {
      return '';
    }
    
    // Original markdown rendering logic
    text = text.replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer" class="markdown-link">$1</a>');
    text = text.replace(/^\s*-\s(.*$)/gm, '<li class="markdown-li">$1</li>');
    text = text.replace(/^\s*\*\s(.*$)/gm, '<li class="markdown-li">$1</li>');
    text = text.replace(/<li.*?>/g, '<ul class="markdown-ul">$&');
    text = text.replace(/<\/li>/g, '</li></ul>');
    text = text
      .replace(/^# (.*$)/gm, `<h2 class="markdown-h2 ${darkMode ? 'dark' : ''}">$1</h2>`)
      .replace(/^## (.*$)/gm, `<h3 class="markdown-h3 ${darkMode ? 'dark' : ''}">$1</h3>`)
      .replace(/^### (.*$)/gm, `<h4 class="markdown-h4 ${darkMode ? 'dark' : ''}">$1</h4>`)
      .replace(/\*\*(.*?)\*\*/g, `<strong class="markdown-strong ${darkMode ? 'dark' : ''}">$1</strong>`)
      .replace(/\*(.*?)\*/g, `<em class="markdown-em">$1</em>`)
      .replace(/`(.*?)`/g, `<code class="markdown-code ${darkMode ? 'dark' : ''}">$1</code>`)
      .replace(/\n/g, '<br class="markdown-br" />');

    return text;
  };

  return (
    <div className={`message-container ${message.sender === 'user' ? 'user' : 'bot'}`}>
      <div
        className={`message-bubble ${message.sender === 'user' ? 'user' : 'bot'} ${darkMode ? 'dark' : ''}`}
        style={{
          padding: '12px 15px',
          borderRadius: '8px',
          maxWidth: '100%',
          fontSize: '14px',
          opacity: 0,
          transform: 'translateY(10px)',
          animation: 'fadeIn 0.3s ease-out forwards',
          backgroundColor: message.sender === 'user'
            ? (darkMode ? '#2b6cb0' : '#007bff')
            : (darkMode ? '#2d3748' : '#ecf0f1'),
          color: message.sender === 'user' ? 'white' : (darkMode ? 'white' : 'black')
        }}
      >
        {isJsonLog ? (
          <LogViewer logData={message.text} darkMode={darkMode} />
        ) : (
          <div dangerouslySetInnerHTML={{ __html: renderMarkdown(message.text) }} />
        )}
      </div>
    </div>
  );
};
