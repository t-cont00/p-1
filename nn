import requests
import urllib3

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Bitbucket API Credentials
API_URL = "https://server.server.server.com/rest/api/1.0/projects/ABC/repos"
AUTH_TOKEN = "nshehehhe"
HEADERS = {
    "Authorization": f"Bearer {AUTH_TOKEN}",
    "Content-Type": "application/json"
}
LIMIT = 700  # Fetch up to 700 repositories per API call


def fetch_repositories():
    """Fetch all repositories from the Bitbucket API."""
    repos = []
    start = 0

    while True:
        response = requests.get(f"{API_URL}?limit={LIMIT}&start={start}", headers=HEADERS, verify=False)
        if response.status_code != 200:
            print(f"Error fetching repositories: {response.status_code} - {response.text}")
            return []

        data = response.json()
        repos.extend([repo["name"] for repo in data.get("values", [])])

        if data.get("isLastPage", False):
            break

        start = data.get("nextPageStart", None)
        if start is None:
            break

    return repos


def fetch_directory_contents(project_name, base_path=""):
    """Fetch folders and files inside a given project directory recursively."""
    url = f"{API_URL}/{project_name}/browse/{base_path}"
    response = requests.get(url, headers=HEADERS, verify=False)

    if response.status_code != 200:
        print(f"‚ö†Ô∏è Error fetching directory: {base_path} in {project_name} - {response.status_code}")
        return []

    data = response.json()
    
    # Debugging: Print API response if structure is incorrect
    if "children" not in data or "values" not in data["children"]:
        print(f"‚ö†Ô∏è Unexpected response format at {base_path}: {data}")
        return []

    # Safely extract names, ensuring 'name' exists in each item
    return [item.get("name", "UNKNOWN") for item in data["children"]["values"]]


def search_in_repository(project_name, base_path, pattern, results):
    """Recursively search for the pattern in folder and file names in all directories."""
    contents = fetch_directory_contents(project_name, base_path)

    for item in contents:
        if item == "UNKNOWN":
            continue  # Skip entries without a valid name

        full_path = f"{base_path}/{item}" if base_path else item  # Avoid leading "/"

        # Check if the item matches the pattern exactly
        if pattern.lower() == item.lower():
            results.append(full_path)

        # If it's a directory, recursively search inside
        if "." not in item:  # Assuming directories don't have file extensions
            search_in_repository(project_name, full_path, pattern, results)


def main():
    print("Fetching all sub-repositories...\n")
    repositories = fetch_repositories()

    if not repositories:
        print("No repositories found. Exiting...")
        return

    print(f"Total repositories found: {len(repositories)}\n")
    
    pattern = input("Enter the exact folder or file name to search: ").strip()
    
    for project in repositories:
        print(f"\nüîç Searching in project: {project}")
        results = []
        search_in_repository(project, "", pattern, results)

        if results:
            print("\n‚úÖ Matching folders/files found:")
            for match in results:
                print(f"- {match}")
        else:
            print("\n‚ùå No matching folders or files found.")

if __name__ == "__main__":
    main()

-------------------------
import requests
import urllib3
import re

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Bitbucket API Credentials
API_URL = "https://server.server.server.com/rest/api/1.0/projects/ABC/repos"
AUTH_TOKEN = "nshehehhe"
HEADERS = {
    "Authorization": f"Bearer {AUTH_TOKEN}",
    "Content-Type": "application/json"
}
LIMIT = 700  # Fetch up to 700 repositories per API call


def fetch_repositories():
    """Fetch all repositories from the Bitbucket API."""
    repos = []
    start = 0

    while True:
        response = requests.get(f"{API_URL}?limit={LIMIT}&start={start}", headers=HEADERS, verify=False)
        if response.status_code != 200:
            print(f"Error fetching repositories: {response.status_code} - {response.text}")
            return []

        data = response.json()
        repos.extend([repo["name"] for repo in data.get("values", [])])

        # Check if it's the last page
        if data.get("isLastPage", False):
            break

        start = data.get("nextPageStart", None)
        if start is None:
            break

    return repos


def fetch_directory_contents(project_name, base_path):
    """Fetch folders and files inside a given project directory via API."""
    url = f"{API_URL}/{project_name}/browse/{base_path}"
    response = requests.get(url, headers=HEADERS, verify=False)

    if response.status_code != 200:
        return []

    data = response.json()
    return [item["name"] for item in data.get("children", {}).get("values", [])]


def search_in_directory(project_name, base_path, pattern):
    """Recursively search for the pattern in folder and file names."""
    matching_items = []
    contents = fetch_directory_contents(project_name, base_path)

    for item in contents:
        full_path = f"{base_path}/{item}"

        # Check if the item matches the pattern
        if re.search(pattern, item, re.IGNORECASE):
            matching_items.append(full_path)

        # If it's a directory, recursively search inside
        if "." not in item:  # Assuming directories don't have a file extension
            matching_items.extend(search_in_directory(project_name, full_path, pattern))

    return matching_items


def main():
    print("Fetching all sub-repositories...\n")
    repositories = fetch_repositories()

    if not repositories:
        print("No repositories found. Exiting...")
        return

    print(f"Total repositories found: {len(repositories)}\n")
    
    num_projects = int(input("Enter the number of projects you want to search: "))
    selected_projects = []

    for i in range(num_projects):
        project_name = input(f"Enter project name {i+1}: ").strip()
        if project_name in repositories:
            selected_projects.append(project_name)
        else:
            print(f"‚ùå No such project found: {project_name}")

    if not selected_projects:
        print("‚ùå No valid projects selected. Exiting...")
        return

    pattern = input("Enter the pattern to search inside 'k8s/envs/pr' folder: ").strip()
    
    for project in selected_projects:
        print(f"\nüîç Searching in project: {project}")
        base_path = "k8s/envs/pr"
        matches = search_in_directory(project, base_path, pattern)

        if matches:
            print("\n‚úÖ Matching folders/files found:")
            for match in matches:
                print(f"- {match}")
        else:
            print("\n‚ùå No matching folders or files found.")

if __name__ == "__main__":
    main()
