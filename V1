#!/bin/bash

API_URL="https://server.server.abc.com/rest/api/1.0/projects/CND/repos"
AUTH_TOKEN="(Auth-token)"
LIMIT=700
START=0

# Declare an array for repositories
declare -a REPOS

# Function to check required conditions in a YAML file
check_yaml_conditions() {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    if [[ -z "$file_content" ]]; then
        echo "‚ö†Ô∏è Error fetching file: $file_url"
        return 1
    fi

    # Check for required conditions
    if grep -qE "requiredDuringSchedulingIgnoredDuringExecution|preferredDuringSchedulingIgnoredDuringExecution" <<< "$file_content"; then
        echo "‚úÖ Condition available in: $file_url"
        return 0
    fi

    return 1
}

# Function to scan YAML files under k8s/envs/pr in parallel
search_yaml_files() {
    local project_name="$1"
    local base_path="$2"

    # Fetch folder & file list
    response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$API_URL/$project_name/browse/$base_path")

    if [[ -z "$response" ]]; then
        echo "‚ö†Ô∏è No such folder: $base_path in $project_name"
        return 1
    fi

    # Extract directory and file names without jq
    items=($(echo "$response" | grep -o '"name":"[^"]*' | sed 's/"name":"//'))

    for item in "${items[@]}"; do
        full_path="$base_path/$item"

        if [[ "$item" =~ \.ya?ml$ ]]; then
            check_yaml_conditions "$project_name" "$full_path" &
        elif [[ ! "$item" =~ \. ]]; then
            search_yaml_files "$project_name" "$full_path" &
        fi
    done

    wait  # Wait for background tasks to complete
}

# Function to fetch repositories efficiently
fetch_repositories() {
    START=0
    while true; do
        response=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
            -H "Content-Type: application/json" "$API_URL?limit=$LIMIT&start=$START")

        if [[ -z "$response" ]]; then
            echo "‚ö†Ô∏è Error fetching repositories."
            return 1
        fi

        # Extract repository names without jq
        while IFS= read -r line; do
            repo_name=$(echo "$line" | sed 's/"name":"//')
            if [[ "$repo_name" != "ssh" && "$repo_name" != "http" && "$repo_name" != "cloud_native_deploy" ]]; then
                REPOS+=("$repo_name")
            fi
        done < <(echo "$response" | grep -o '"name":"[^"]*')

        # Check if it's the last page
        if echo "$response" | grep -q '"isLastPage":true'; then
            break
        fi

        # Get next start index
        START=$(echo "$response" | grep -o '"nextPageStart":[0-9]*' | sed 's/"nextPageStart"://')
    done
}

# Main execution
fetch_repositories

mapfile -t PROJECTS < repo.txt
echo "üîç Starting search in projects..."

for project_name in "${PROJECTS[@]}"; do
    if [[ " ${REPOS[*]} " =~ " $project_name " ]]; then
        echo "üìÇ Searching in project: $project_name"
        search_yaml_files "$project_name" "k8s/envs/pr" &
    else
        echo "üö´ No such project: $project_name available."
    fi
done

wait  # Ensure all parallel jobs finish before exiting

echo "‚úÖ Scan complete!"
