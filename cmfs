import urllib3
import yaml

# === Suppress SSL warnings ===
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
http = urllib3.PoolManager(cert_reqs='CERT_NONE')

# === Configuration ===
BASE_API_URL = "https://dummy-api.local/files"
AUTH_TOKEN = "Bearer your_dummy_token_here"

HEADERS = {
    "Authorization": AUTH_TOKEN,
    "Accept": "application/json, text/plain"
}

# === Keys to ignore during comparison ===
IGNORED_KEYS = ["timestamp", "uuid", "build_id", "last_updated"]

# === Recursive dictionary comparison ===
def compare_dicts(d1, d2, path="", differences=None, ignored_keys=None):
    if differences is None:
        differences = {}
    if ignored_keys is None:
        ignored_keys = []

    for key in d1:
        full_key = f"{path}.{key}" if path else key
        if key in ignored_keys:
            continue

        if key not in d2:
            differences[full_key] = {"file1": d1[key], "file2": "<missing>"}
        elif isinstance(d1[key], dict) and isinstance(d2[key], dict):
            compare_dicts(d1[key], d2[key], full_key, differences, ignored_keys)
        elif d1[key] != d2[key]:
            differences[full_key] = {"file1": d1[key], "file2": d2[key]}

    for key in d2:
        full_key = f"{path}.{key}" if path else key
        if key not in d1 and key not in ignored_keys:
            differences[full_key] = {"file1": "<missing>", "file2": d2[key]}

    return differences

# === Function to fetch YAML file content from API ===
def fetch_yaml_from_api(file_path):
    url = f"{BASE_API_URL}/{file_path}"
    try:
        response = http.request("GET", url, headers=HEADERS)
        if response.status != 200:
            print(f"Failed to fetch {file_path}: HTTP {response.status}")
            return None

        content_type = response.headers.get("Content-Type", "")
        if "application/json" in content_type:
            import json
            data = json.loads(response.data.decode("utf-8"))
            return yaml.safe_load(data.get("content", ""))
        else:  # Assume plain text YAML
            return yaml.safe_load(response.data.decode("utf-8"))

    except Exception as e:
        print(f"Error fetching file '{file_path}': {e}")
        return None

# === Main comparison logic ===
def main(file_path_1, file_path_2):
    print(f"üîç Comparing files:\n  1. {file_path_1}\n  2. {file_path_2}\n")

    data1 = fetch_yaml_from_api(file_path_1)
    data2 = fetch_yaml_from_api(file_path_2)

    if data1 is None or data2 is None:
        print("‚ùå Could not fetch one or both files.")
        return

    differences = compare_dicts(data1, data2, ignored_keys=IGNORED_KEYS)

    if differences:
        print("‚ùå Differences found:")
        for key, val in differences.items():
            print(f"- {key}:\n    file1: {val['file1']}\n    file2: {val['file2']}")
    else:
        print("‚úÖ Files match (excluding ignored keys).")

# === Example usage ===
if __name__ == "__main__":
    file_path_1 = "k8s/envs/dv/usc1/app-830/local/coml-5632/workflow.yaml"
    file_path_2 = "k8s/envs/dv/usc1/app-830/qa/coml-5632/workflow.yaml"
    main(file_path_1, file_path_2)


#########################################################################
  import urllib3
import yaml

# === Suppress SSL warnings ===
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
http = urllib3.PoolManager(cert_reqs='CERT_NONE')

# === Configuration ===
BASE_API_URL = "https://dummy-api.local/files"
AUTH_TOKEN = "Bearer your_dummy_token_here"

HEADERS = {
    "Authorization": AUTH_TOKEN,
    "Accept": "application/json, text/plain"
}

# === Recursive dictionary comparison (no ignored keys) ===
def compare_dicts(d1, d2, path="", differences=None):
    if differences is None:
        differences = {}

    for key in d1:
        full_key = f"{path}.{key}" if path else key
        if key not in d2:
            differences[full_key] = {"file1": d1[key], "file2": "<missing>"}
        elif isinstance(d1[key], dict) and isinstance(d2[key], dict):
            compare_dicts(d1[key], d2[key], full_key, differences)
        elif d1[key] != d2[key]:
            differences[full_key] = {"file1": d1[key], "file2": d2[key]}

    for key in d2:
        full_key = f"{path}.{key}" if path else key
        if key not in d1:
            differences[full_key] = {"file1": "<missing>", "file2": d2[key]}

    return differences

# === Function to fetch YAML file content from API ===
def fetch_yaml_from_api(file_path):
    url = f"{BASE_API_URL}/{file_path}"
    try:
        response = http.request("GET", url, headers=HEADERS)
        if response.status != 200:
            print(f"Failed to fetch {file_path}: HTTP {response.status}")
            return None

        content_type = response.headers.get("Content-Type", "")
        if "application/json" in content_type:
            import json
            data = json.loads(response.data.decode("utf-8"))
            return yaml.safe_load(data.get("content", ""))
        else:  # Assume plain text YAML
            return yaml.safe_load(response.data.decode("utf-8"))

    except Exception as e:
        print(f"Error fetching file '{file_path}': {e}")
        return None

# === Main comparison logic ===
def main(file_path_1, file_path_2):
    print(f"üîç Comparing files:\n  1. {file_path_1}\n  2. {file_path_2}\n")

    data1 = fetch_yaml_from_api(file_path_1)
    data2 = fetch_yaml_from_api(file_path_2)

    if data1 is None or data2 is None:
        print("‚ùå Could not fetch one or both files.")
        return

    differences = compare_dicts(data1, data2)

    if differences:
        print("‚ùå Differences found:")
        for key, val in differences.items():
            print(f"- {key}:\n    file1: {val['file1']}\n    file2: {val['file2']}")
    else:
        print("‚úÖ Files are an exact match.")

# === Example usage ===
if __name__ == "__main__":
    file_path_1 = "k8s/envs/dv/usc1/app-830/local/coml-5632/workflow.yaml"
    file_path_2 = "k8s/envs/dv/usc1/app-830/qa/coml-5632/workflow.yaml"
    main(file_path_1, file_path_2)

