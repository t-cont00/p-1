import requests
import csv
import urllib3

# Suppress SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# API Configuration
API_URL = "https://server.server.abc.com/rest/api/1.0/projects"
AUTH_TOKEN = "(Auth-token)"
HEADERS = {"Authorization": f"Bearer {AUTH_TOKEN}", "Content-Type": "application/json"}

# Read project names from repo.txt
def load_project_names():
    with open("repo.txt", "r") as file:
        return [line.strip() for line in file if line.strip()]

# Fetch file content and check for required patterns
def check_yaml_conditions(project_name, file_path):
    file_url = f"{API_URL}/{project_name}/repos/CND/browse/{file_path}"
    response = requests.get(file_url, headers=HEADERS, verify=False)

    if response.status_code == 200:
        file_content = response.text
        if "requiredDuringSchedulingIgnoredDuringExecution" in file_content or \
           "preferredDuringSchedulingIgnoredDuringExecution" in file_content:
            return True
    return False

# Recursively scan YAML files in CND repo
def search_yaml_files(project_name, base_path, results):
    repo_url = f"{API_URL}/{project_name}/repos/CND/browse/{base_path}"
    response = requests.get(repo_url, headers=HEADERS, verify=False)

    if response.status_code != 200:
        return

    data = response.json()
    items = [item["name"] for item in data.get("values", [])]

    for item in items:
        full_path = f"{base_path}/{item}"
        if item.endswith((".yaml", ".yml")):
            if check_yaml_conditions(project_name, full_path):
                results.append((project_name, full_path))
        else:
            search_yaml_files(project_name, full_path, results)

# Main execution
if __name__ == "__main__":
    projects = load_project_names()
    results = []

    for project in projects:
        print(f"Scanning project: {project}")
        search_yaml_files(project, "k8s/envs/pr", results)

    # Export results to CSV
    csv_file = "scan_results.csv"
    with open(csv_file, mode="w", newline="") as file:
        writer = csv.writer(file)
        writer.writerow(["Project Name", "File Path"])
        writer.writerows(results)

    print(f"Scan complete. Results saved in {csv_file}.")
