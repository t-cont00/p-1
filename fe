'use client';

import { useState, useRef, useEffect } from 'react';

const TypingIndicator = ({ darkMode }) => (
  <div
    className="typing-indicator"
    style={{
      display: 'flex',
      alignItems: 'center',
      gap: '0.25rem',
      padding: '0.5rem 1rem',
      borderRadius: '0.5rem',
      backgroundColor: darkMode ? '#4a5568' : '#f7fafc',
      width: 'fit-content',
    }}
  >
    <div className={`typing-dot ${darkMode ? 'dark' : ''}`} style={{ animationDelay: '0ms' }} />
    <div className={`typing-dot ${darkMode ? 'dark' : ''}`} style={{ animationDelay: '150ms' }} />
    <div className={`typing-dot ${darkMode ? 'dark' : ''}`} style={{ animationDelay: '300ms' }} />
  </div>
);

const MessageBubble = ({ message, darkMode }) => {
  const renderMarkdown = (text) => {
    return text
      .replace(/^# (.*$)/gm, `<h2 class="markdown-h2 ${darkMode ? 'dark' : ''}">$1</h2>`)
      .replace(/^## (.*$)/gm, `<h3 class="markdown-h3 ${darkMode ? 'dark' : ''}">$1</h3>`)
      .replace(/^### (.*$)/gm, `<h4 class="markdown-h4 ${darkMode ? 'dark' : ''}">$1</h4>`)
      .replace(/\*\*(.*?)\*\*/g, `<strong class="markdown-strong ${darkMode ? 'dark' : ''}">$1</strong>`)
      .replace(/\*(.*?)\*/g, '<em class="markdown-em">$1</em>')
      .replace(/`(.*?)`/g, `<code class="markdown-code ${darkMode ? 'dark' : ''}">$1</code>`)
      .replace(/\n/g, '<br />');
  };

  return (
    <div className={`message-container ${message.sender === 'user' ? 'user' : 'bot'}`}>
      <div
        className={`message-bubble ${message.sender === 'user' ? 'user' : 'bot'} ${darkMode ? 'dark' : ''}`}
        dangerouslySetInnerHTML={{ __html: renderMarkdown(message.text) }}
      />
    </div>
  );
};

export default function Chatbot() {
  const [messages, setMessages] = useState([
    {
      sender: 'bot',
      text: "Hello! I'm your ABC knowledge assistant. How can I help you today?\n\nYou can ask me things like:\n- **How to install SoftwareX**\n- **SoftwareX configuration**\n- **Solution for SoftwareX configuration issues**",
    },
  ]);

  const [input, setInput] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    setDarkMode(mediaQuery.matches);
    const handler = (e) => setDarkMode(e.matches);
    mediaQuery.addEventListener('change', handler);
    return () => mediaQuery.removeEventListener('change', handler);
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;

    const userMessage = { sender: 'user', text: input };
    setMessages((prev) => [...prev, userMessage]);
    setInput('');
    setIsTyping(true);

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query: input }),
      });

      if (!response.ok) throw new Error('Network response was not ok');

      const data = await response.json();
      const botMessage = { sender: 'bot', text: data.response };
      setMessages((prev) => [...prev, botMessage]);
    } catch (error) {
      setMessages((prev) => [
        ...prev,
        { sender: 'bot', text: `Error: ${error instanceof Error ? error.message : 'Unknown error'}` },
      ]);
    } finally {
      setIsTyping(false);
    }
  };

  return (
    <div className={`app-container ${darkMode ? 'dark' : ''}`}>
      {/* Header */}
      <header className={`app-header ${darkMode ? 'dark' : ''}`}>
        <div className="header-content">
          <div className="header-icon-container">
            <div className="header-icon">xyz</div>
            <div>
              <h1 className="header-title">ABC Knowledge Assistant</h1>
              <p className={`header-subtitle ${darkMode ? 'dark' : ''}`}>Powered by Gemini AI</p>
            </div>
          </div>
          <button
            onClick={() => setDarkMode(!darkMode)}
            className={`dark-mode-toggle ${darkMode ? 'dark' : ''}`}
            aria-label={darkMode ? 'Switch to light mode' : 'Switch to dark mode'}
          >
            {darkMode ? (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path d="M17.293 13.293 8 0 6.707 2.707 8 10.586 10.586 10.586z" />
              </svg>
            ) : (
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path
                  fillRule="evenodd"
                  d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.951l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0z"
                  clipRule="evenodd"
                />
              </svg>
            )}
          </button>
        </div>
      </header>

      {/* Chat container */}
      <div className="chat-container">
        {messages.map((message, index) => (
          <MessageBubble key={index} message={message} darkMode={darkMode} />
        ))}

        {isTyping && (
          <div className="typing-container">
            <TypingIndicator darkMode={darkMode} />
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input area */}
      <form onSubmit={handleSubmit} className={`input-form ${darkMode ? 'dark' : ''}`}>
        <div className="input-container">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder="Ask about XYZ processes, guides, or solutions..."
            className={`input-field ${darkMode ? 'dark' : ''}`}
          />
          <button type="submit" disabled={!input.trim() || isTyping} className="submit-button">
            Send
          </button>
        </div>
      </form>
    </div>
  );
}
