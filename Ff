# Extract agent name correctly and convert to lowercase
agent_name=$(echo "$file_content" | grep -Po 'AGENT_NAME:\s*value:\s*"\K[^"]+')

# Function to validate agent_name based on file_path
function validate_agent_name {
    local file_path="$1"
    local agent_name="$2"

    # Convert agent_name to lowercase for case-insensitive comparison
    local agent_name_lower=$(echo "$agent_name" | tr '[:upper:]' '[:lower:]')

    if [[ "$file_path" == *"usc1"* ]]; then
        if [[ "$agent_name_lower" != *"c1"* ]]; then
            echo "❌ Mismatch: Expected 'C1' in agent name but got '$agent_name' for file '$file_path'"
            return 1
        fi
    elif [[ "$file_path" == *"use5"* ]]; then
        if [[ "$agent_name_lower" != *"e5"* ]]; then
            echo "❌ Mismatch: Expected 'E5' in agent name but got '$agent_name' for file '$file_path'"
            return 1
        fi
    fi

    echo "✅ Agent name '$agent_name' is correctly mapped to '$file_path'"
    return 0
}

# Validate agent name against file path
validate_agent_name "$file_path" "$agent_name"






# Function to validate agent_name based on file_path
function validate_agent_name {
    local file_path="$1"
    local agent_name="$2"

    if [[ "$file_path" == *"usc1"* ]]; then
        if [[ "$agent_name" != *"C1"* ]]; then
            echo "❌ Mismatch: Expected 'C1' in agent name but got '$agent_name' for file '$file_path'"
            return 1
        fi
    elif [[ "$file_path" == *"use5"* ]]; then
        if [[ "$agent_name" != *"E5"* ]]; then
            echo "❌ Mismatch: Expected 'E5' in agent name but got '$agent_name' for file '$file_path'"
            return 1
        fi
    fi

    echo "✅ Agent name '$agent_name' is correctly mapped to '$file_path'"
    return 0
}




function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content (JSON response)
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Define required key-value pairs
    declare -a required_pairs_one=( 
        "name: API_SERVER" "value: uc4webprodny.chicago.cme.com"
        "name: API_CLIENT" "value: 185"
        "name: UC4_ENV" "value: NY"
        "name: APPSERVER1" "value: ucprap0001j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2307"
    )

    declare -a required_pairs_two=(
        "name: API_SERVER" "value: uc4dr.chicago.cme.com"
        "name: API_CLIENT" "value: 100"
        "name: UC4_ENV" "value: DR"
        "name: APPSERVER1" "value: ucdrap0001j.chicago.cme.com"
        "name: APPSERVER2" "value: ucdrap0002j.chicago.cme.com"
        "name: APPSERVER3" "value: ucdrap0003j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2305"
    )

    # Function to check if all pairs in a set exist in the file
    function check_pair_set {
        local -n pairs=$1
        for pair in "${pairs[@]}"; do
            if [[ "$file_content" != *"$pair"* ]]; then
                return 1
            fi
        done
        return 0
    }

    # Check if either set is fully present
    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        echo "✔ Content Available: $file_url"
    else
        echo "X Content Not Available: $file_url"
    fi

    # Debug: Print file content for checking
    echo "DEBUG: File Content Extracted: "
    echo "$file_content"

    # Extract AGENT_NAME value
    agent_name=""
    found_agent_name=false

    while IFS= read -r line; do
        echo "DEBUG: Processing Line → $line"
        
        if [[ "$line" =~ "-name: AGENT_NAME" ]]; then
            found_agent_name=true
            echo "DEBUG: Found -name: AGENT_NAME"
        elif [[ "$found_agent_name" == true && "$line" =~ "value:" ]]; then
            agent_name=$(echo "$line" | sed -E 's/.*value:[ ]*([^"]+).*/\1/')
            echo "DEBUG: Extracted Agent Name → $agent_name"
            break
        fi
    done <<< "$(echo "$file_content" | grep '"text":')"

    # Validate AGENT_NAME
    if [[ -z "$agent_name" ]]; then
        echo "X Missing AGENT_NAME in file: $file_url"
        return 1
    fi

    # Determine expected prefix based on file path
    local expected_prefix=""
    if [[ "$file_path" =~ "use5" ]]; then
        expected_prefix="PRUGE5"
    elif [[ "$file_path" =~ "usc1" ]]; then
        expected_prefix="PRUGC1"
    else
        echo "Skipping $file_url: Unknown region."
        return 1
    fi

    # Extract prefix from AGENT_NAME
    agent_prefix=$(echo "$agent_name" | grep -oE 'PRUGE5|PRUGC1')

    if [[ -z "$agent_prefix" ]]; then
        echo "X AGENT_NAME format incorrect in $file_url: $agent_name"
        return 1
    elif [[ "$agent_prefix" != "$expected_prefix" ]]; then
        echo "X Incorrect AGENT_NAME in $file_url: $agent_name (Expected: $expected_prefix)"
        return 1
    else
        echo "✔ Correct AGENT_NAME in $file_url: $agent_name"
    fi
}


-£+£-£+£(£+£-£+£+£+

function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content (JSON response)
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Define required key-value pairs
    declare -a required_pairs_one=( 
        "name: API_SERVER" "value: uc4webprodny.chicago.cme.com"
        "name: API_CLIENT" "value: 185"
        "name: UC4_ENV" "value: NY"
        "name: APPSERVER1" "value: ucprap0001j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2307"
    )

    declare -a required_pairs_two=(
        "name: API_SERVER" "value: uc4dr.chicago.cme.com"
        "name: API_CLIENT" "value: 100"
        "name: UC4_ENV" "value: DR"
        "name: APPSERVER1" "value: ucdrap0001j.chicago.cme.com"
        "name: APPSERVER2" "value: ucdrap0002j.chicago.cme.com"
        "name: APPSERVER3" "value: ucdrap0003j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2305"
    )

    # Function to check if all pairs in a set exist in the file
    function check_pair_set {
        local -n pairs=$1
        for pair in "${pairs[@]}"; do
            if [[ "$file_content" != *"$pair"* ]]; then
                return 1
            fi
        done
        return 0
    }

    # Check if either set is fully present
    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        echo "✔ Content Available: $file_url"
    else
        echo "X Content Not Available: $file_url"
    fi

    # Extract AGENT_NAME value
    agent_name=""
    found_agent_name=false

    while IFS= read -r line; do
        if [[ "$line" =~ "-name: AGENT_NAME" ]]; then
            found_agent_name=true
        elif [[ "$found_agent_name" == true && "$line" =~ "value:" ]]; then
            agent_name=$(echo "$line" | sed -E 's/.*value:[ ]*([^"]+).*/\1/')
            break
        fi
    done <<< "$(echo "$file_content" | grep '"text":')"

    # Validate AGENT_NAME
    if [[ -z "$agent_name" ]]; then
        echo "X Missing AGENT_NAME in file: $file_url"
        return 1
    fi

    # Determine expected prefix based on file path
    local expected_prefix=""
    if [[ "$file_path" =~ "use5" ]]; then
        expected_prefix="PRUGE5"
    elif [[ "$file_path" =~ "usc1" ]]; then
        expected_prefix="PRUGC1"
    else
        echo "Skipping $file_url: Unknown region."
        return 1
    fi

    # Extract prefix from AGENT_NAME
    agent_prefix=$(echo "$agent_name" | grep -oE 'PRUGE5|PRUGC1')

    if [[ -z "$agent_prefix" ]]; then
        echo "X AGENT_NAME format incorrect in $file_url: $agent_name"
        return 1
    elif [[ "$agent_prefix" != "$expected_prefix" ]]; then
        echo "X Incorrect AGENT_NAME in $file_url: $agent_name (Expected: $expected_prefix)"
        return 1
    else
        echo "✔ Correct AGENT_NAME in $file_url: $agent_name"
    fi
}




function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content (JSON response)
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Define two sets of required pairs
    declare -a required_pairs_one=( 
        "name: API_SERVER" "value: uc4webprodny.chicago.cme.com"
        "name: API_CLIENT" "value: 185"
        "name: UC4_ENV" "value: NY"
        "name: APPSERVER1" "value: ucprap0001j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2307"
    )

    declare -a required_pairs_two=(
        "name: API_SERVER" "value: uc4dr.chicago.cme.com"
        "name: API_CLIENT" "value: 100"
        "name: UC4_ENV" "value: DR"
        "name: APPSERVER1" "value: ucdrap0001j.chicago.cme.com"
        "name: APPSERVER2" "value: ucdrap0002j.chicago.cme.com"
        "name: APPSERVER3" "value: ucdrap0003j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2305"
    )

    # Function to check if all pairs in a set exist in the file
    function check_pair_set {
        local -n pairs=$1  # Use nameref for array
        for pair in "${pairs[@]}"; do
            if [[ "$file_content" != *"$pair"* ]]; then
                return 1  # Set is not fully present
            fi
        done
        return 0  # Set is fully present
    }

    # Check if either set is fully present
    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        echo "✔ Content Available: $file_url"
    else
        echo "X Content Not Available: $file_url"
    fi

    # Extract raw YAML content from JSON response
    yaml_content=$(echo "$file_content" | grep -oP '(?<="text": ")[^"]+' | sed 's/\\n/\n/g')

    # Extract AGENT_NAME value from YAML content
    agent_value=$(echo "$yaml_content" | awk '
        /-name: AGENT_NAME/ {
            getline;
            print $2;
        }'
    )

    # Check if AGENT_NAME was found
    if [[ -z "$agent_value" ]]; then
        echo "X Missing AGENT_NAME in file: $file_url"
        return 1
    fi

    # Determine expected prefix based on file path
    local expected_prefix=""
    if [[ "$file_path" =~ "use5" ]]; then
        expected_prefix="PRUGE5"
    elif [[ "$file_path" =~ "usc1" ]]; then
        expected_prefix="PRUGC1"
    else
        echo "Skipping $file_url: Unknown region."
        return 1
    fi

    # Extract only the relevant prefix (PRUGE5 or PRUGC1)
    agent_prefix=$(echo "$agent_value" | grep -oE 'PRUGE5|PRUGC1')

    # Validate AGENT_NAME
    if [[ -z "$agent_prefix" ]]; then
        echo "X AGENT_NAME format incorrect in $file_url: $agent_value"
        return 1
    elif [[ "$agent_prefix" != "$expected_prefix" ]]; then
        echo "X Incorrect AGENT_NAME in $file_url: $agent_value (Expected: $expected_prefix)"
        return 1
    else
        echo "✔ Correct AGENT_NAME in $file_url: $agent_value"
    fi
}




_#+#&#+#-#+

function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Define two sets of required pairs
    declare -a required_pairs_one=( 
        "name: API_SERVER" "value: uc4webprodny.chicago.cme.com"
        "name: API_CLIENT" "value: 185"
        "name: UC4_ENV" "value: NY"
        "name: APPSERVER1" "value: ucprap0001j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2307"
    )

    declare -a required_pairs_two=(
        "name: API_SERVER" "value: uc4dr.chicago.cme.com"
        "name: API_CLIENT" "value: 100"
        "name: UC4_ENV" "value: DR"
        "name: APPSERVER1" "value: ucdrap0001j.chicago.cme.com"
        "name: APPSERVER2" "value: ucdrap0002j.chicago.cme.com"
        "name: APPSERVER3" "value: ucdrap0003j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2305"
    )

    # Function to check if all pairs in a set exist in the file
    function check_pair_set {
        local -n pairs=$1  # Use nameref for array
        for pair in "${pairs[@]}"; do
            if [[ "$file_content" != *"$pair"* ]]; then
                return 1  # Set is not fully present
            fi
        done
        return 0  # Set is fully present
    }

    # Check if either set is fully present
    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        echo "✔ Content Available: $file_url"
    else
        echo "X Content Not Available: $file_url"
    fi

    # Extract AGENT_NAME value from YAML content
    agent_value=$(echo "$file_content" | awk '/-name: AGENT_NAME/{getline; print $2}')

    # Check if AGENT_NAME was found
    if [[ -z "$agent_value" ]]; then
        echo "X Missing AGENT_NAME in file: $file_url"
        return 1
    fi

    # Determine expected prefix based on file path
    local expected_prefix=""
    if [[ "$file_path" =~ "use5" ]]; then
        expected_prefix="PRUGE5"
    elif [[ "$file_path" =~ "usc1" ]]; then
        expected_prefix="PRUGC1"
    else
        echo "Skipping $file_url: Unknown region."
        return 1
    fi

    # Extract only the relevant prefix (PRUGE5 or PRUGC1)
    agent_prefix=$(echo "$agent_value" | grep -oE 'PRUGE5|PRUGC1')

    # Validate AGENT_NAME
    if [[ -z "$agent_prefix" ]]; then
        echo "X AGENT_NAME format incorrect in $file_url: $agent_value"
        return 1
    elif [[ "$agent_prefix" != "$expected_prefix" ]]; then
        echo "X Incorrect AGENT_NAME in $file_url: $agent_value (Expected: $expected_prefix)"
        return 1
    else
        echo "✔ Correct AGENT_NAME in $file_url: $agent_value"
    fi
}

':*!";£(£+£

function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content (JSON response)
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Extract YAML content from the JSON response
    yaml_content=$(echo "$file_content" | grep -oP '(?<=text": ")[^"]+' | sed 's/\\n/\n/g')

    # Extract AGENT_NAME value
    agent_value=$(echo "$yaml_content" | awk '/-name: AGENT_NAME/{getline; print $2}')

    # Check if we successfully extracted an agent name
    if [[ -z "$agent_value" ]]; then
        echo "X Missing AGENT_NAME in file: $file_url"
        return 1
    fi

    # Determine expected prefix based on file path
    local expected_prefix=""
    if [[ "$file_path" =~ "use5" ]]; then
        expected_prefix="PRUGE5"
    elif [[ "$file_path" =~ "usc1" ]]; then
        expected_prefix="PRUGC1"
    else
        echo "Skipping $file_url: Unknown region."
        return 1
    fi

    # Extract only the relevant prefix (PRUGE5 or PRUGC1)
    agent_prefix=$(echo "$agent_value" | grep -oE 'PRUGE5|PRUGC1')

    # Validate AGENT_NAME
    if [[ -z "$agent_prefix" ]]; then
        echo "X AGENT_NAME format incorrect in $file_url: $agent_value"
        return 1
    elif [[ "$agent_prefix" != "$expected_prefix" ]]; then
        echo "X Incorrect AGENT_NAME in $file_url: $agent_value (Expected: $expected_prefix)"
        return 1
    else
        echo "✔ Correct AGENT_NAME in $file_url: $agent_value"
    fi
}





agent_value=$(echo "$file_content" | jq -r '.[] | select(.text | test("name: AGENT NAME"; "i")) | .text' | sed -n 2p | awk '{print $2}')

        # Validate AGENT_NAME
        if [[ -z "$agent_value" ]]; then
            echo "X Missing AGENT_NAME: $file_url"
            return 1
        elif [[ ! "$agent_value" =~ ^$expected_prefix ]]; then
            echo "X Incorrect AGENT_NAME in $file_url: $agent_value"
            return 1
        fi

        return 0
    }
-----

function check_yaml_content {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" \
        "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Define two sets of required pairs
    declare -a required_pairs_one=(
        "name: API_SERVER"
        "value: \"uc4webprodny.chicago.cme.com\""
        "name: API_CLIENT"
        "value: \"185\""
        "name: UC4_ENV"
        "value: \"NY\""
        "name: APPSERVER1"
        "value: \"ucprap0001j.chicago.cme.com\""
        "name: AGENT_PORT"
        "value: \"2307\""
    )

    declare -a required_pairs_two=(
        "name: API_SERVER"
        "value: \"uc4dr.chicago.cme.com\""
        "name: API_CLIENT"
        "value: \"100\""
        "name: UC4_ENV"
        "value: \"DR\""
        "name: APPSERVER1"
        "value: \"ucdrap0001j.chicago.cme.com\""
        "name: APPSERVER2"
        "value: \"ucdrap0002j.chicago.cme.com\""
        "name: APPSERVER3"
        "value: \"ucdrap0003j.chicago.cme.com\""
        "name: AGENT_PORT"
        "value: \"2305\""
    )

    # Function to check if all pairs in a set exist in the file
    function check_pair_set {
        local -n pairs=$1  # Use nameref for array
        for pair in "${pairs[@]}"; do
            if [[ "$file_content" != *"$pair"* ]]; then
                return 1  # Set is not fully present
            fi
        done
        return 0  # Set is fully present
    }

    # Function to check AGENT_NAME correctness
    function check_agent_name {
        local expected_prefix=""
        
        if [[ "$file_path" =~ "use5" ]]; then
            expected_prefix="PRUGE5"
        elif [[ "$file_path" =~ "usc1" ]]; then
            expected_prefix="PRUGC1"
        else
            echo "Skipping $file_url: Unknown region."
            return 1
        fi

        # Extract AGENT_NAME value
        agent_value=$(echo "$file_content" | grep -oP '(?<=name: AGENT_NAME\n\s*value: )\S+')

        if [[ -z "$agent_value" ]]; then
            echo "X Missing AGENT_NAME: $file_url"
            return 1
        elif [[ ! "$agent_value" =~ ^$expected_prefix ]]; then
            echo "X Incorrect AGENT_NAME in $file_url: $agent_value"
            return 1
        fi

        return 0
    }

    # Check if either set is fully present
    if check_pair_set required_pairs_one || check_pair_set required_pairs_two; then
        if check_agent_name; then
            echo "✔ Content Available & AGENT_NAME Correct: $file_url"
        fi
    else
        echo "X Content Not Available: $file_url"
    fi
}

-------




check_yaml_content() {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Define required pairs for use5
    declare -a required_pairs_one_use5=(
        "name: AGENT_NAME" "value: PRUGE5.*"
        "name: API_SERVER" "value: uc4webprodny.chicago.cme.com"
        "name: API_CLIENT" "value: 185"
        "name: UC4_ENV" "value: NY"
        "name: APPSERVER1" "value: ucprap0001j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2307"
    )

    declare -a required_pairs_two_use5=(
        "name: AGENT_NAME" "value: PRUGE5.*"
        "name: API_SERVER" "value: uc4dr.chicago.cme.com"
        "name: API_CLIENT" "value: 100"
        "name: UC4_ENV" "value: DR"
        "name: APPSERVER1" "value: ucdrap0001j.chicago.cme.com"
        "name: APPSERVER2" "value: ucdrap0002j.chicago.cme.com"
        "name: APPSERVER3" "value: ucdrap0003j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2305"
    )

    # Define required pairs for usc1
    declare -a required_pairs_one_usc1=(
        "name: AGENT_NAME" "value: PRUGC1.*"
        "name: API_SERVER" "value: uc4webprodny.chicago.cme.com"
        "name: API_CLIENT" "value: 185"
        "name: UC4_ENV" "value: NY"
        "name: APPSERVER1" "value: ucprap0001j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2307"
    )

    declare -a required_pairs_two_usc1=(
        "name: AGENT_NAME" "value: PRUGC1.*"
        "name: API_SERVER" "value: uc4dr.chicago.cme.com"
        "name: API_CLIENT" "value: 100"
        "name: UC4_ENV" "value: DR"
        "name: APPSERVER1" "value: ucdrap0001j.chicago.cme.com"
        "name: APPSERVER2" "value: ucdrap0002j.chicago.cme.com"
        "name: APPSERVER3" "value: ucdrap0003j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2305"
    )

    # Function to check if all pairs exist in file content
    check_pair_set() {
        local -n pairs=$1  # Use nameref for array
        for ((i = 0; i < ${#pairs[@]}; i += 2)); do
            local key="${pairs[i]}"
            local value="${pairs[i+1]}"
            # Handle wildcard matching by using grep with regex
            if ! echo "$file_content" | grep -q -E "$key\s*:\s*$value"; then
                return 1  # Set is not fully present
            fi
        done
        return 0  # Set is fully present
    }

    # Determine which pairs to check based on file path
    if [[ "$file_path" == *"use5"* ]]; then
        if check_pair_set required_pairs_one_use5 || check_pair_set required_pairs_two_use5; then
            echo "✔ Content Available: $file_url"
        else
            echo "❌ Content Not Available: $file_url"
        fi
    elif [[ "$file_path" == *"usc1"* ]]; then
        if check_pair_set required_pairs_one_usc1 || check_pair_set required_pairs_two_usc1; then
            echo "✔ Content Available: $file_url"
        else
            echo "❌ Content Not Available: $file_url"
        fi
    else
        echo "❌ File path does not match expected environments (use5 or usc1)"
    fi
}




*********
check_yaml_content() {
    local project_name="$1"
    local file_path="$2"
    local file_url="$API_URL/$project_name/browse/$file_path"

    # Fetch file content
    file_content=$(curl -s -H "Authorization: Bearer $AUTH_TOKEN" \
        -H "Content-Type: application/json" "$file_url")

    # Check if file contains 'statefulset'
    if [[ "$file_content" != *"statefulset"* ]]; then
        return
    fi

    # Define required pairs for different environments
    declare -a required_pairs_one_use5=(
        "name: API_SERVER" "value: uc4webprodny.chicago.cme.com"
        "name: API_CLIENT" "value: 185"
        "name: UC4_ENV" "value: NY"
        "name: APPSERVER1" "value: ucprap0001j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2307"
    )

    declare -a required_pairs_two_use5=(
        "name: API_SERVER" "value: uc4dr.chicago.cme.com"
        "name: API_CLIENT" "value: 100"
        "name: UC4_ENV" "value: DR"
        "name: APPSERVER1" "value: ucdrap0001j.chicago.cme.com"
        "name: APPSERVER2" "value: ucdrap0002j.chicago.cme.com"
        "name: APPSERVER3" "value: ucdrap0003j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2305"
    )

    declare -a required_pairs_one_usc1=(
        "name: API_SERVER" "value: uc4webprodny.chicago.cme.com"
        "name: API_CLIENT" "value: 185"
        "name: UC4_ENV" "value: NY"
        "name: APPSERVER1" "value: ucprap0001j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2307"
    )

    declare -a required_pairs_two_usc1=(
        "name: API_SERVER" "value: uc4dr.chicago.cme.com"
        "name: API_CLIENT" "value: 100"
        "name: UC4_ENV" "value: DR"
        "name: APPSERVER1" "value: ucdrap0001j.chicago.cme.com"
        "name: APPSERVER2" "value: ucdrap0002j.chicago.cme.com"
        "name: APPSERVER3" "value: ucdrap0003j.chicago.cme.com"
        "name: AGENT_PORT" "value: 2305"
    )

    # Function to check if a set of pairs exist in the file
    check_pair_set() {
        local -n pairs=$1  # Use nameref for array
        for ((i = 0; i < ${#pairs[@]}; i += 2)); do
            local key="${pairs[i]}"
            local value="${pairs[i+1]}"
            if ! grep -qE "$key\s*:\s*$value" <<< "$file_content"; then
                return 1  # Set is not fully present
            fi
        done
        return 0  # Set is fully present
    }

    # Determine which pairs to check based on file path
    if [[ "$file_path" == *"use5"* ]]; then
        if check_pair_set required_pairs_one_use5 || check_pair_set required_pairs_two_use5; then
            echo "✔ Content Available: $file_url"
        else
            echo "❌ Content Not Available: $file_url"
        fi
    elif [[ "$file_path" == *"usc1"* ]]; then
        if check_pair_set required_pairs_one_usc1 || check_pair_set required_pairs_two_usc1; then
            echo "✔ Content Available: $file_url"
        else
            echo "❌ Content Not Available: $file_url"
        fi
    else
        echo "❌ File path does not match expected environments (use5 or usc1)"
    fi
}
